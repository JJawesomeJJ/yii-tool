<?php


namespace backend\modules\tool\Job;


use backend\modules\tool\DataSource\SqlSource;
use backend\modules\tool\models\DataSourceTask;
use backend\modules\tool\models\Node;
use backend\modules\tool\models\SqlConfig;
use yii\db\Exception;

class SqlNode extends SqlSource
{
    protected $id;
    protected $batch_num=1;
    protected $run_fun="";
    protected $fun_name;
    protected $node;
    public function __construct($id)
    {
        $this->id=$id;
        $task=DataSourceTask::find()->where(["id"=>$id])->one();
        $node=Node::find()->where(["id"=>$task->task_id])->one();
        $this->target_pdo=SqlConfig::GetConfigPdo($node->source_config);
        $this->target_pdo->setAttribute(\PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);
        $this->local_pdo=SqlConfig::GetConfigPdo($node->desc_config);
        $this->node=$node;
        if(!empty($node->before_sql)){
            foreach (explode("--****--",$node->before_sql) as $item){
                if(!empty($item)){
                    $this->local_pdo->exec($item);
                }
            }
        }

        $this->run_fun=$node->run_fun;
        if(!empty($node->run_fun)){
            try {
                preg_match_all("/function (.*?)\(/is", $node->run_fun, $matchs);
                $this->fun_name = $matchs[1][0];
                if(empty($this->fun_name)){
                    throw new \Exception("fun name reqiured but {$this->fun_name} given!");
                }
                $this->run_fun = eval($node->run_fun);
            }
            catch (\Exception $exception){
                echo "failed parse fun .$exception";
                sleep(10);
            }

        }
        $this->sql=$node->sql_string;
        $this->table_name=$node->desc_table;

        parent::__construct();
    }
    public function StoreData($data)
    {
        if(!empty($this->fun_name)){
            $fun=$this->fun_name;
            $data=$fun($data);
        }
        echo "TaskName".$this->node->node_name.PHP_EOL;
        echo microtime(true)-start_at.PHP_EOL;
        parent::StoreData($data); // TODO: Change the autogenerated stub
    }
}